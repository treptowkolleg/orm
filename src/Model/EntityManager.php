<?php

namespace TreptowKolleg\ORM\Model;

use TreptowKolleg\ORM\ORM\AutoGenerated;
use TreptowKolleg\ORM\ORM\Column;

class EntityManager
{

    private \PDO $db;

    public function __construct()
    {
        $this->db = (new Database())->getConnection();
        $this->db->beginTransaction();
    }

    private function setColumns(\ReflectionClass $reflectionClass): string
    {
        $entityProperties = $reflectionClass->getProperties();
        $columns = false;
        foreach ($entityProperties as $property) {
            if(!empty($property->getAttributes(Column::class)) and empty($property->getAttributes(AutoGenerated::class)))
            {
                $propertyNameAsArray = preg_split('/(?=[A-Z])/', $property->getName());
                $propertyNameAsSnakeTail = strtolower(implode('_', $propertyNameAsArray));
                $columns .= "{$propertyNameAsSnakeTail},";
            }
        }
        return rtrim($columns, ',');
    }

    private function setTableName(\ReflectionClass $reflectionClass): string
    {
        return $this->generateSnakeTailString($reflectionClass->getShortName());
    }

    public function generateSnakeTailString(string $value): string
    {
        $valueAsArray = preg_split('/(?=[A-Z])/', $value);
        return strtolower(ltrim(implode('_', $valueAsArray),'_'));
    }

    private function setValueNames(\ReflectionClass $reflectionClass): string
    {
        $entityProperties = $reflectionClass->getProperties();
        $valueNames = false;
        foreach ($entityProperties as $property) {
            if(!empty($property->getAttributes(Column::class)) and empty($property->getAttributes(AutoGenerated::class)))
            {
                $propertyNameAsArray = preg_split('/(?=[A-Z])/', $property->getName());
                $propertyNameAsSnakeTail = strtolower(implode('_', $propertyNameAsArray));
                $valueNames .= ":$propertyNameAsSnakeTail,";
            }
        }
        return rtrim($valueNames, ',');
    }

    private function setValues(\ReflectionClass $reflectionClass): string
    {
        $entityProperties = $reflectionClass->getProperties();
        $valueNames = false;
        foreach ($entityProperties as $property) {
            if(!empty($property->getAttributes(Column::class)) and empty($property->getAttributes(AutoGenerated::class)))
            {
                $propertyNameAsArray = preg_split('/(?=[A-Z])/', $property->getName());
                $propertyNameAsSnakeTail = strtolower(implode('_', $propertyNameAsArray));
                $valueNames .= ":{$this->makeCondition($propertyNameAsSnakeTail)},";
            }
        }
        return rtrim($valueNames, ',');
    }

    private function makeCondition(string $key): string
    {
        return "$key = :$key";
    }


    public function persist($entity, int $id = null): void
    {
        try {
            $class = new \ReflectionClass($entity);
            if($id == null) {
                $statement = $this->db->prepare("INSERT INTO {$this->setTableName($class)}({$this->setColumns($class)}) VALUES ({$this->setValueNames($class)})");
            } else {
                $this->db->prepare("UPDATE entity SET {$this->setValues($class)} WHERE id = :id");
            }
        } catch (\ReflectionException $e) {

        }



    }

}